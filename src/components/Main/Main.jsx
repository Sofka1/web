import React, { useEffect, useState } from 'react';
import { fetchServices } from '../../ServicesData'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fetchServices
import style from "./Main.module.css";
import { Link } from 'react-router-dom';
import { CopyToClipboard } from 'react-copy-to-clipboard';
import { CSSTransition } from 'react-transition-group';
import { Element } from 'react-scroll';

const TestCard = ({ title, description, background }) => {
  return (
    <div className={style.testCard} style={{ background }}>
      <h2>{title}</h2>
      <p>{description}</p>
      <button className={style.goButton}>–ü–µ—Ä–µ–π—Ç–∏</button>
    </div>
  );
}; 

const ArticleCard = ({ id, title, description, background, onFavoriteToggle }) => {
  const favoriteArticles = JSON.parse(localStorage.getItem('favoriteArticles')) || [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç—å—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [favorite, setFavorite] = useState(favoriteArticles.includes(id));

  const handleFavoriteClick = async () => {
    const newFavoriteState = !favorite;
    setFavorite(newFavoriteState);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑ localStorage (–∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    const user = JSON.parse(localStorage.getItem('user'));

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –≤ localStorage
    if (newFavoriteState) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
      localStorage.setItem('favoriteArticles', JSON.stringify([...favoriteArticles, id]));
    } else {
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
      localStorage.setItem('favoriteArticles', JSON.stringify(favoriteArticles.filter((articleId) => articleId !== id)));
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (user) {
      try {
        const response = await fetch('http://localhost:8080/api/favorites', {
          method: newFavoriteState ? 'POST' : 'DELETE', // POST –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, DELETE –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            article_id: id,      // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—å–∏
            user_id: user.id,    // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          }),
        });

        if (!response.ok) {
          throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        }

        console.log(newFavoriteState ? '–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ' : '–°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/—É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', error);
      }
    }


  };

  return (
    <div className={style.testCard} style={{ background }}>
      <h4 className={style.articlesTitle}>{title}</h4>
      <div className={style.optionArticles}>
        <Link className={style.goButton} to={`/articles/${id}`}>–ü–µ—Ä–µ–π—Ç–∏</Link>

        <div className={style.favoriteIcon} onClick={handleFavoriteClick}>
          {favorite ? (
            <span className={style.filledHeart}>‚ù§Ô∏è</span> // –ó–∞–∫—Ä–∞—à–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
          ) : (
            <span className={style.emptyHeart}>ü§ç</span> // –ü—É—Å—Ç–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ
          )}
        </div>
      </div>
    </div>
  );
};


const SliderArticles = () => {
  const [articles, setArticles] = useState([]); // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [currentSlide, setCurrentSlide] = useState(0);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const fetchArticles = async () => {
      try {
        const response = await fetch('http://localhost:8080/api/articles/all');
        const data = await response.json();
        setArticles(data || []);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π:", error);
        setArticles([]); // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    fetchArticles();
  }, []);

  const handleFavoriteToggle = async (articleId) => {
    const user = JSON.parse(localStorage.getItem('user')); // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤ localStorage —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user || !user.id) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('Article ID:', articleId);
      const response = await fetch('http://localhost:8080/api/favorites/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: user.id, // –ø–µ—Ä–µ–¥–∞–µ–º user_id –∏–∑ localStorage
          article_id: articleId,
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }

      console.log('–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    } catch (error) {
      console.error(error.message);
    }
  };

  const totalSlides = Math.ceil(articles.length / 3);

  const nextSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide + 1) % totalSlides);
  };

  const prevSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide - 1 + totalSlides) % totalSlides);
  };

  const startIndex = currentSlide * 3;
  const currentArticles = articles.slice(startIndex, startIndex + 3);

  return (
    <div className={style.sliderContainer}>
      <div className={style.slides}>
        {currentArticles.map((article, index) => (
          <div key={index} className={style.slide}>
            <ArticleCard
              id={article.id}
              title={article.title}
              description={article.description}
              background="linear-gradient(45deg, #feecf1, #fff7f3)"
              onFavoriteToggle={handleFavoriteToggle}
              isFavorite={false} // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            />
          </div>
        ))}
      </div>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
      <div className={style.sliderControls}>
        <button className={style.arrowButton} onClick={prevSlide}>
          <svg width="103" height="12" viewBox="0 0 103 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M102 7C102.552 7 103 6.55228 103 6C103 5.44772 102.552 5 102 5V7ZM0 6L10 11.7735V0.226497L0 6ZM102 5L9 5V7L102 7V5Z" fill="#545778" />
          </svg>
        </button>
        <div className={style.slideNumber}>
          {currentSlide + 1} / {totalSlides}
        </div>
        <button className={style.arrowButton} onClick={nextSlide}>
          <svg width="109" height="12" viewBox="0 0 109 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 5C0.447715 5 -4.82823e-08 5.44772 0 6C4.82823e-08 6.55228 0.447715 7 1 7L1 5ZM109 5.99999L99 0.226489L99 11.7735L109 5.99999ZM1 7L100 6.99999L100 4.99999L1 5L1 7Z" fill="#545778" />
          </svg>
        </button>
      </div>
    </div>
  );
};

const SliderArticlesMini = () => {
  const [articles, setArticles] = useState([]); // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  const [currentSlide, setCurrentSlide] = useState(0);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const fetchArticles = async () => {
      try {
        const response = await fetch('http://localhost:8080/api/articles/all');
        const data = await response.json();
        setArticles(data || []);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–µ–π:", error);
        setArticles([]); // –£—Å—Ç–∞–Ω–æ–≤–∏–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    };

    fetchArticles();
  }, []);

  const handleFavoriteToggle = async (articleId) => {
    const user = JSON.parse(localStorage.getItem('user')); // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –≤ localStorage —Ö—Ä–∞–Ω–∏—Ç—Å—è –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user || !user.id) {
      console.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      return;
    }

    try {
      console.log('Article ID:', articleId);
      const response = await fetch('http://localhost:8080/api/favorites/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_id: user.id, // –ø–µ—Ä–µ–¥–∞–µ–º user_id –∏–∑ localStorage
          article_id: articleId,
        }),
      });

      if (!response.ok) {
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
      }

      console.log('–°—Ç–∞—Ç—å—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
    } catch (error) {
      console.error(error.message);
    }
  };

  const totalSlides = articles.length;

  const nextSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide + 1) % totalSlides);
  };

  const prevSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide - 1 + totalSlides) % totalSlides);
  };

  return (
    <div className={style.sliderContainer}>
      {articles.length > 0 ? (
        <div className={style.slides}>
          <ArticleCard
            id={articles[currentSlide].id}
            title={articles[currentSlide].title}
            description={articles[currentSlide].description}
            background="linear-gradient(45deg, #feecf1, #fff7f3)"
            onFavoriteToggle={() => handleFavoriteToggle(articles[currentSlide].id)}
            isFavorite={false} // –ó–¥–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
          />
        </div>
      ) : (
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–µ–π...</p> // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      )}
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
      <div className={style.sliderControls}>
        <button className={style.arrowButton} onClick={prevSlide}>
          <svg width="103" height="12" viewBox="0 0 103 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M102 7C102.552 7 103 6.55228 103 6C103 5.44772 102.552 5 102 5V7ZM0 6L10 11.7735V0.226497L0 6ZM102 5L9 5V7L102 7V5Z" fill="#545778" />
          </svg>
        </button>
        <div className={style.slideNumber}>
          {currentSlide + 1} / {totalSlides}
        </div>
        <button className={style.arrowButton} onClick={nextSlide}>
          <svg width="109" height="12" viewBox="0 0 109 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 5C0.447715 5 -4.82823e-08 5.44772 0 6C4.82823e-08 6.55228 0.447715 7 1 7L1 5ZM109 5.99999L99 0.226489L99 11.7735L109 5.99999ZM1 7L100 6.99999L100 4.99999L1 5L1 7Z" fill="#545778" />
          </svg>
        </button>
      </div>
    </div>
  );
};

const SliderTests = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const testCards = [
    {
      title: '–¢–µ—Å—Ç 1',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 1',
      background: 'linear-gradient(45deg, #feecf1 0%, #fff7f3 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 2',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 2',
      background: 'linear-gradient(90deg, #fbfefe 0%, #fcfefe 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 3',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 3',
      background: 'linear-gradient(135deg, #fffef4 0%, #fff2f0 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 4',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 4',
      background: 'linear-gradient(45deg, #feecf1 0%, #fff7f3 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 5',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 5',
      background: 'linear-gradient(90deg, #fbfefe 0%, #fcfefe 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 6',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 6',
      background: 'linear-gradient(135deg, #fffef4 0%, #fff2f0 100%)',
    },
  ];

  const totalSlides = Math.ceil(testCards.length / 3);

  const nextSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide + 1) % totalSlides);
  };

  const prevSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide - 1 + totalSlides) % totalSlides);
  };

  const startIndex = currentSlide * 3;
  const currentCards = testCards.slice(startIndex, startIndex + 3);

  return (
    <div className={style.sliderContainer}>
      <div className={style.slides}>
        {currentCards.map((card, index) => (
          <div key={index} className={style.slide}>
            <TestCard title={card.title} description={card.description} background={card.background} />
          </div>
        ))}
      </div>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
      <div className={style.sliderControls}>
        <button className={style.arrowButton} onClick={prevSlide}>
          <svg width="103" height="12" viewBox="0 0 103 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M102 7C102.552 7 103 6.55228 103 6C103 5.44772 102.552 5 102 5V7ZM0 6L10 11.7735V0.226497L0 6ZM102 5L9 5V7L102 7V5Z" fill="#545778" />
          </svg>
        </button>
        <div className={style.slideNumber}>
          {currentSlide + 1} / {totalSlides}
        </div>
        <button className={style.arrowButton} onClick={nextSlide}>
          <svg width="109" height="12" viewBox="0 0 109 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 5C0.447715 5 -4.82823e-08 5.44772 0 6C4.82823e-08 6.55228 0.447715 7 1 7L1 5ZM109 5.99999L99 0.226489L99 11.7735L109 5.99999ZM1 7L100 6.99999L100 4.99999L1 5L1 7Z" fill="#545778" />
          </svg>
        </button>
      </div>
    </div>
  );
};

const SliderTestsMini = () => {
  const [currentSlide, setCurrentSlide] = useState(0);

  const testCards = [
    {
      title: '–¢–µ—Å—Ç 1',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 1',
      background: 'linear-gradient(45deg, #feecf1 0%, #fff7f3 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 2',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 2',
      background: 'linear-gradient(90deg, #fbfefe 0%, #fcfefe 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 3',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 3',
      background: 'linear-gradient(135deg, #fffef4 0%, #fff2f0 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 4',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 4',
      background: 'linear-gradient(45deg, #feecf1 0%, #fff7f3 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 5',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 5',
      background: 'linear-gradient(90deg, #fbfefe 0%, #fcfefe 100%)',
    },
    {
      title: '–¢–µ—Å—Ç 6',
      description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ 6',
      background: 'linear-gradient(135deg, #fffef4 0%, #fff2f0 100%)',
    },
  ];

  const totalSlides = testCards.length;

  const nextSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide + 1) % totalSlides);
  };

  const prevSlide = () => {
    setCurrentSlide((prevSlide) => (prevSlide - 1 + totalSlides) % totalSlides);
  };

  return (
    <div className={style.sliderContainer}>
      <div className={style.slides}>
        <TestCard
          title={testCards[currentSlide].title}
          description={testCards[currentSlide].description}
          background={testCards[currentSlide].background}
        />
      </div>
      {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å */}
      <div className={style.sliderControls}>
        <button className={style.arrowButton} onClick={prevSlide}>
          <svg width="103" height="12" viewBox="0 0 103 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M102 7C102.552 7 103 6.55228 103 6C103 5.44772 102.552 5 102 5V7ZM0 6L10 11.7735V0.226497L0 6ZM102 5L9 5V7L102 7V5Z" fill="#545778" />
          </svg>
        </button>
        <div className={style.slideNumber}>
          {currentSlide + 1} / {totalSlides}
        </div>
        <button className={style.arrowButton} onClick={nextSlide}>
          <svg width="109" height="12" viewBox="0 0 109 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M1 5C0.447715 5 -4.82823e-08 5.44772 0 6C4.82823e-08 6.55228 0.447715 7 1 7L1 5ZM109 5.99999L99 0.226489L99 11.7735L109 5.99999ZM1 7L100 6.99999L100 4.99999L1 5L1 7Z" fill="#545778" />
          </svg>
        </button>
      </div>
    </div>
  );
};


// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–≤–µ–∑–¥–æ—á–µ–∫
const StarRating = ({ rating }) => {
  const maxStars = 5;
  const stars = [];

  const starContainerStyle = {
    display: 'inline-block',
    width: '24px',
    height: '24px',
    borderRadius: '2px',
    margin: '0px',
    textAlign: 'center',
    lineHeight: '22px',
    color: '#f86a6c',
    fontSize: '24px'
  };

  for (let i = 1; i <= maxStars; i++) {
    stars.push(
      <span key={i} style={starContainerStyle}>
        {i <= rating ? '‚òÖ' : '‚òÜ'}
      </span>
    );
  }

  return <div>{stars}</div>;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–∑—ã–≤–∞
const ReviewCard = ({ review, background }) => {
  const { name, rating, comment, avatar } = review;
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className={style.reviewCard} style={{ background }}>
      <StarRating rating={rating} />
      <p className={`${style.commentUserForRevi} ${isExpanded ? style.expanded : ''}`}>{comment}</p>
      <button className={style.expanButton} onClick={toggleExpand}>
        {isExpanded ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ'}
      </button>
      <div className={style.infoUserForRev}>
        <div className={style.avatarUser}>
          <img src={avatar || require('./image/defaultAvatar.png')} />
        </div>
        <p className={style.nameUserForRevi}>{name}</p>
      </div>
    </div>
  );
};

// SVG-–∏–∫–æ–Ω–∫–∞ —Å—Ç—Ä–µ–ª–∫–∏
const ArrowIcon = ({ isExpanded }) => (
  <svg
    width="26"
    height="26"
    viewBox="0 0 26 26"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className={isExpanded ? style.rotated : ''}
  >
    <path
      d="M6.5 9.75L13 16.25L19.5 9.75" // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ –≤–Ω–∏–∑
      stroke="#545778"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    />
  </svg>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç FAQItem –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
const FAQItem = ({ question, answer }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const toggleExpand = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className={style.faqItem}>
      <div className={style.faqQuestion} onClick={toggleExpand}>
        <p>{question}</p>
        <button className={style.expandButton}>
          <ArrowIcon isExpanded={isExpanded} />
        </button>
      </div>
      {isExpanded && <div className={style.faqAnswer}>{answer}</div>}
    </div>
  );
};

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—á—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
const EmailCopy = () => {
  const [showNotification, setShowNotification] = useState(false);

  const handleCopy = () => {
    setShowNotification(true);
    setTimeout(() => {
      setShowNotification(false);
    }, 5000);
  };

  return (
    <div className={style.containerCopy}>
      <CopyToClipboard text="ivka_83@mail.ru" onCopy={handleCopy}>
        <button className={style.copyButton}>
          <img className={style.iconCopyButton} src={require('./image/mail.png')} />
          ivka_83@mail.ru
        </button>
      </CopyToClipboard>
      <CSSTransition
        in={showNotification}
        timeout={500}
        classNames={{
          enter: style['notification-enter'],
          enterActive: style['notification-enter-active'],
          exit: style['notification-exit'],
          exitActive: style['notification-exit-active'],
        }}
        unmountOnExit
      >
        <div className={style.notification}>–ü–æ—á—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!</div>
      </CSSTransition>
    </div>
  );
};

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
const PhoneCopy = () => {
  const [showNotification, setShowNotification] = useState(false);

  const handleCopy = () => {
    setShowNotification(true);
    setTimeout(() => {
      setShowNotification(false);
    }, 5000);
  };

  return (
    <div className={style.containerCopy}>
      <CopyToClipboard text="+7 967 371 7579" onCopy={handleCopy}>
        <button className={style.copyButton}>
          <img className={style.iconCopyButton} src={require('./image/phoneCall.png')} />
          +7 967 371 7579
        </button>
      </CopyToClipboard>
      <CSSTransition
        in={showNotification}
        timeout={500}
        classNames={{
          enter: style['notification-enter'],
          enterActive: style['notification-enter-active'],
          exit: style['notification-exit'],
          exitActive: style['notification-exit-active'],
        }}
        unmountOnExit
      >
        <div className={style.notification}>–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!</div>
      </CSSTransition>
    </div>
  );
};

const Main = () => {
  const [services, setServices] = useState([]);
  const faqs = [
    {
      question: '–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ?',
      answer: (<span>
        –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ò–ù–ü) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ (—Ç.–µ. —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —É–∂–µ –≤ –•–•I –≤–µ–∫–µ) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏, –ø–æ–ª—É—á–∏–≤—à–µ–µ, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –∫—Ä–∞—Ç–∫–∏–π —Å—Ä–æ–∫ —Å–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—á–µ–Ω—å —à–∏—Ä–æ–∫–æ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ –≤ –†–æ—Å—Å–∏–∏, —Ç–∞–∫ –∏ –≤ –±–ª–∏–∂–Ω–µ–º –∏ –¥–∞–ª—å–Ω–µ–º –∑–∞—Ä—É–±–µ–∂—å–µ.
        <br />
        <br />
        –ü–æ–¥—Ä–æ–±–Ω–µ–µ: <a className={style.answerLink} href="https://psy-in.ru/articles/vmesto-vvedeniya-ili-ochen-korotko-ob-integralnom-nejroprogrammirovanii-inp?ysclid=lrrp773125293140394 " target="_blank" rel="noopener noreferrer">https://psy-in.ru/articles/vmesto-vvedeniya-ili-ochen-korotko-ob-integralnom-nejroprogrammirovanii-inp?ysclid=lrrp773125293140394 </a>.
      </span>),
    },
    {
      question: '–ö–∞–∫–æ–≤–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏?',
      answer: '–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª—É—á–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.',
    },
    {
      question: '–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º?',
      answer: '–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º, –∑–∞–ø–æ–ª–Ω–∏–≤ —Ñ–æ—Ä–º—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
    },
  ];

  const [reviews, setReviews] = useState([]);

  useEffect(() => {
    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –æ—Ç–∑—ã–≤—ã –∏–∑ API
    const fetchReviews = async () => {
      try {
        const response = await fetch('http://localhost:8080/api/AllReviews');
        const data = await response.json();

        if (response.ok) {
          // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏ –æ—Ç–∑—ã–≤–∞
          setReviews(data.slice(0, 3));
        } else {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', data.message);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      }
    };

    fetchReviews();
  }, []);

  const backgroundGradients = [
    'linear-gradient(45deg, #feecf1 0%, #fff7f3 100%)',
    'linear-gradient(90deg, #fbfefe 0%, #fcfefe 100%)',
    'linear-gradient(135deg, #fffef4 0%, #fff2f0 100%)'
  ];

  useEffect(() => {
    const loadServices = async () => {
      try {
        const fetchedServices = await fetchServices();
        setServices(fetchedServices); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥:', error);
      }
    };

    loadServices(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  }, []);

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º slice, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞
  const limitedServices = services.slice(0, 3);

  const formatCost = (cost) => {
    const parsedCost = parseFloat(cost);
    return parsedCost % 1 === 0 ? `${parsedCost} ‚ÇΩ` : `${parsedCost.toFixed(2)} ‚ÇΩ`;
  };

  return (
    <main className={style.main}>
      <div className={style.conteiner}>
        <div className={style.information}>
          <div className={style.title}>
            <h1>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥</h1>
            <h2>–í –º–µ—Ç–æ–¥–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ù–ü –°.–í. –ö–æ–≤–∞–ª—ë–≤–∞</h2>
          </div>
          <Link to={'/services'}>
            <button className={style.enroll}>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button>
          </Link>
        </div>
        <div className={style.decoration}>
          <img src={require('./image/decor.png')} alt="decor" />
        </div>
      </div>

      <div className={style.voln}>
        <img src={require('./image/voln.png')} />
      </div>

      {/* –û–±–æ –º–Ω–µ */}
      <div className={style.aboutMe}>
        <img src={require('./image/mam.png')} />
        <div className={style.aboutMeInformation}>
          <div className={style.titleAboutMe}>
            <h2>–û —Å–µ–±–µ</h2>
            <div className={style.decorAboutMe}></div>
          </div>
          <p>–Ø - <span>–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞</span>, –∏ –º–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–º –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏. </p>
          <p>–ú–Ω–æ–π —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—É—Ä—Å "–ü—Ä–∞–∫—Ç–∏–∫", –∏ –º–æ–π <span>–≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã</span> - –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–µ –Ω–µ–π—Ä–æ–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ <span>–ò–ù–ü</span> (2.0) —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä–æ–º –°.–í. –ö–æ–≤–∞–ª–µ–≤—ã–º –≤ –ò–Ω—Å—Ç–∏—Ç—É—Ç–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Å–∏—Ö–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.</p>
        </div>
      </div>

      {/* –£—Å–ª—É–≥–∏ */}
      <div className={style.inquiries}>
        <div className={style.inquiriesTitle}>
          <h3>–° –∫–∞–∫–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ —è —Ä–∞–±–æ—Ç–∞—é</h3>
        </div>
        <div className={style.serviceCards}>
          {limitedServices.length > 0 ? (
            limitedServices.map((service) => (
              <div key={service.id} className={style.card1}>
                <div className={style.cardTitle}>
                  <p>{service.title}</p>
                </div>
                <div className={style.cardInfo}>
                  <div className={style.duration}>
                    <div className={style.infoTitle}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</div>
                    <div className={style.tochki}></div>
                    <div className={style.infoValue}>
                      {service.duration.minutes ? `${service.duration.minutes} –º–∏–Ω—É—Ç` : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </div>
                  </div>
                  <div className={style.format}>
                    <div className={style.infoTitle}>–§–æ—Ä–º–∞—Ç:</div>
                    <div className={style.tochki}></div>
                    <div className={style.infoValue}>{service.format}</div>
                  </div>
                  <div className={style.cost}>
                    <div className={style.infoTitle}>–°—Ç–æ–∏–º–æ—Å—Ç—å:</div>
                    <div className={style.tochki}></div>
                    <div className={style.infoValue}>{formatCost(service.cost)}</div>
                  </div>
                </div>
                <div className={style.cardOption}>
                  <Link className={style.linkCard} to={`/service/${service.id}`}>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</Link>
                  <button className={style.enroll}>–ó–∞–ø–∏—Å–∞—Ç—å—Å—è</button>
                </div>
              </div>
            ))
          ) : (
            <p>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>
          )}
        </div>
        <div className={style.goCatalog}>
          <Link to="/services">
            <button>
              <div className={style.buttonGoCatalog}>
                <p>–ö–∞—Ç–∞–ª–æ–≥</p>
                <div className={style.blueArrow}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12H19" stroke="#545778" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                    <path d="M12 5L19 12L12 19" stroke="#545778" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                  </svg>
                </div>
                <div className={style.whiteArrow}>
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M5 12H19" stroke="#FFF" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                    <path d="M12 5L19 12L12 19" stroke="#FFF" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round" />
                  </svg>
                </div>
              </div>
            </button>
          </Link>
        </div>
      </div>

      <div className={style.voln2}>
        <img src={require('./image/voln.png')} />
      </div>

      {/* –ú–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ */}
      <div className={style.myBenefits}>
        <div className={style.myBenefitsTitle}>–ú–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞</div>
        <div className={style.myBenefitsContents}>
          <div className={style.myBenefitsInfo}>
            <p>–≠—Ç–æ <span>—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ</span> (—Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤ –•–• –≤–µ–∫–µ), <span>–∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ</span> –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏, –≤–æ–±—Ä–∞–≤—à–µ–µ –≤ —Å–µ–±—è –æ–ø—ã—Ç –∏ —Å–∞–º–æ–µ –ª—É—á—à–µ–µ –∏–∑ –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏.</p>
            <p>–í–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞ –≤—Å–µ—Ö –µ–≥–æ —Å—Ç–∞–¥–∏—è—Ö –∂–∏–∑–Ω–∏.</p>
          </div>
          <img src={require('./image/decor2.png')} />
        </div>
      </div>

      {/* –û—Ç–∑—ã–≤—ã */}
      <Element name="reviews">
        <div className={style.testimonials}>
          <h3>–û—Ç–∑—ã–≤—ã</h3>
          <div className={style.reviewContainer}>
            {reviews.map((review, index) => (
              <ReviewCard
                key={review.id}
                review={review}
                background={backgroundGradients[index % backgroundGradients.length]}
              />
            ))}
          </div>
        </div>
      </Element>

      <div className={style.voln3}>
        <img src={require('./image/voln.png')} />
      </div>

      <Element name="faq">
        {/* –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã */}
        <div className={style.faqBlock}>
          <h3>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h3>
          <div className={style.conteinerFAQ}>
            {faqs.map((faq, index) => (
              <FAQItem key={index} question={faq.question} answer={faq.answer} />
            ))}
          </div>
        </div>
      </Element>

      {/* –î–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è */}
      <Element name="selfDevelopment">
        <div className={style.selfDiscovery}>
          <h3>–î–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è</h3>
          <div className={style.conteinerSelfDiscovery}>
            <div className={style.sliderContainer}>
              <SliderTests />
            </div>
          </div>
        </div>
      </Element>

      {/* –î–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –º–∏–Ω–∏ */}
      <Element name="selfDevelopment">
        <div className={style.selfDiscoveryMini}>
          <h3>–î–ª—è —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è</h3>
          <div className={style.conteinerSelfDiscovery}>
            <div className={style.sliderContainer}>
              <SliderTestsMini />
            </div>
          </div>
        </div>
      </Element>

      {/* –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ */}
      <Element>
        <div className={style.selfDiscovery}>
          <h3>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</h3>
          <div className={style.conteinerSelfDiscovery}>
            <div className={style.sliderContainer}>
              <SliderArticles />
            </div>
          </div>
        </div>
      </Element>

      {/* –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ */}
      <Element>
        <div className={style.selfDiscoveryMini}>
          <h3>–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç–∞—Ç—å–∏</h3>
          <div className={style.conteinerSelfDiscovery}>
            <div className={style.sliderContainer}>
              <SliderArticlesMini />
            </div>
          </div>
        </div>
      </Element>

      <div className={style.voln4}>
        <img src={require('./image/voln.png')} />
      </div>

      <Element name="contacts">
        {/* –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? */}
        <div className={style.haveQuesion}>
          <div className={style.titleHaveQuesion}>
            <h3>–û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã?</h3>
            <p>—Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π</p>
          </div>
          <div className={style.haveQuesionLinks}>
            <EmailCopy />
            <div className={style.tgCopy}>
              <img className={style.iconCopyButton} src={require('./image/send.png')} />
              <Link className={style.tgLink} to="https://t.me/Ekaterina_INP">https://t.me/Ekaterina_INP</Link>
            </div>
            <PhoneCopy />
          </div>
        </div>
      </Element>
    </main>
  );
}

export default Main;